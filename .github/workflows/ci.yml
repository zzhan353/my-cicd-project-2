name: Node.js CI/CD Workflow

on:
  push:
    branches:
      - "main"
      - "uat"
      - "feature/**"
  pull_request:
    branches: [ "main", "uat" ]

jobs:
  # ===============================================================
  # JOB 1: Continuous Integration (CI)
  # - Lints, tests the code, and uploads coverage report.
  # ===============================================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      # - 把你的代码仓库下载到 CI 虚拟机上
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Node.js 环境
      # - 安装 Node.js，并启用 npm 依赖缓存以加快速度
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 步骤 3: 安装所有依赖
      # - 运行 npm install 来安装 package.json 中定义的所有包
      - name: 📦 Install dependencies
        run: npm install

      # 步骤 4: 修复脚本执行权限
      # - 解决在 Linux 环境下可能出现的 'permission denied' 问题
      - name: 🔑 Fix execute permissions
        run: chmod +x ./node_modules/.bin/*

      # 步骤 5: 运行代码风格检查
      # - 执行在 package.json 中定义的 'lint' 脚本
      - name: 💅 Run ESLint
        run: npm run lint

      # 步骤 6: 运行测试并生成覆盖率报告
      # - 执行在 package.json 中定义的 'test' 脚本
      # - 我们已经在 package.json 中为 'test' 脚本加上了 '--coverage' 参数
      - name: 🧪 Run tests and generate coverage
        run: npm test

      # 步骤 7: 上传覆盖率报告到 Codecov (新！)
      # - 使用 Codecov 官方的 Action
      # - 它会自动找到生成的覆盖率报告并上传
      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          # 我们不再需要 token 了
          enable_path_fixes: true
          fail_ci_if_error: true

  build-and-push:
    name: Build and Push Docker Image
    needs: build-and-test
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/uat') && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-cicd-project-2:${{ github.ref_name }}

  deploy-to-uat:
    name: Deploy to UAT Runner
    needs: build-and-push
    if: github.ref == 'refs/heads/uat' && github.event_name == 'push'
    runs-on: self-hosted
    steps:
      - name: Deploy UAT to Local Docker
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-cicd-project-2:uat
          docker stop my-app-uat
          docker rm my-app-uat
          docker run -d --name my-app-uat -p 3001:3000 -e NODE_ENV=uat ${{ secrets.DOCKERHUB_USERNAME }}/my-cicd-project-2:uat

  deploy-to-production:
    name: Deploy to Production Runner
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: self-hosted
    steps:
      - name: Deploy Production to Local Docker
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-cicd-project-2:main
          docker stop my-app-prod
          docker rm my-app-prod
          docker run -d --name my-app-prod -p 3002:3000 -e NODE_ENV=production ${{ secrets.DOCKERHUB_USERNAME }}/my-cicd-project-2:main